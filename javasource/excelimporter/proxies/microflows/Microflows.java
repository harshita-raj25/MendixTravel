// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package excelimporter.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the ExcelImporter module
	public static void _DocumentationDummyXSD(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ExcelImporter._DocumentationDummyXSD").withParams(params).execute(context);
	}
	public static void _DocumentationExportParseFlows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ExcelImporter._DocumentationExportParseFlows").withParams(params).execute(context);
	}
	public static void _DocumentationImportParseFlows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ExcelImporter._DocumentationImportParseFlows").withParams(params).execute(context);
	}
	public static void aCr_Template(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.ACr_Template").withParams(params).execute(context);
	}
	/**
	 * This microflow shows the actions which should be executed when the application is being started.
	 * 
	 * First synchronize all objects using the ModelReflection module. Then validate the excel templats
	 */
	public static boolean aSu_CheckModelAndTemplates(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.ASu_CheckModelAndTemplates").withParams(params).execute(context);
	}
	public static boolean bCo_Column(IContext context, excelimporter.proxies.Column _pColumn)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("pColumn", _pColumn == null ? null : _pColumn.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.BCo_Column").withParams(params).execute(context);
	}
	public static boolean bDe_Column(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.BDe_Column").withParams(params).execute(context);
	}
	public static void ch_Column_SetDefaultObject(IContext context, excelimporter.proxies.Column _columns)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Columns", _columns == null ? null : _columns.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_Column_SetDefaultObject").withParams(params).execute(context);
	}
	public static void ch_FindAttribute(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_FindAttribute").withParams(params).execute(context);
	}
	public static void ch_FindAttribute_Reference(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_FindAttribute_Reference").withParams(params).execute(context);
	}
	public static void ch_FindMicroflow(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_FindMicroflow").withParams(params).execute(context);
	}
	public static void ch_FindObjectType_Reference(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_FindObjectType_Reference").withParams(params).execute(context);
	}
	public static void ch_FindReference(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_FindReference").withParams(params).execute(context);
	}
	public static void ch_SetAttribute(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_SetAttribute").withParams(params).execute(context);
	}
	public static void ch_SetAttribute_Reference(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_SetAttribute_Reference").withParams(params).execute(context);
	}
	public static void ch_SetMicroflow(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_SetMicroflow").withParams(params).execute(context);
	}
	public static void ch_SetObjectType_Reference(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_SetObjectType_Reference").withParams(params).execute(context);
	}
	public static void ch_SetReference(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_SetReference").withParams(params).execute(context);
	}
	public static void ch_Template_ChangeObjectType(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.Ch_Template_ChangeObjectType").withParams(params).execute(context);
	}
	public static boolean ch_Template_CheckNrs(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.Ch_Template_CheckNrs").withParams(params).execute(context);
	}
	public static void cleanupOldRefHandling(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.CleanupOldRefHandling").withParams(params).execute(context);
	}
	public static void column_SetCorrectRefObjectType(IContext context, mxmodelreflection.proxies.MxObjectReference _reference, excelimporter.proxies.Column _column, mxmodelreflection.proxies.MxObjectType _startMxObjectType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Reference", _reference == null ? null : _reference.getMendixObject());
		params.put("Column", _column == null ? null : _column.getMendixObject());
		params.put("StartMxObjectType", _startMxObjectType == null ? null : _startMxObjectType.getMendixObject());
		Core.microflowCall("ExcelImporter.Column_SetCorrectRefObjectType").withParams(params).execute(context);
	}
	public static void column_SetDetails(IContext context, excelimporter.proxies.Column _pColumn)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("pColumn", _pColumn == null ? null : _pColumn.getMendixObject());
		Core.microflowCall("ExcelImporter.Column_SetDetails").withParams(params).execute(context);
	}
	public static java.lang.String columnDataSourceToString(IContext context, excelimporter.proxies.DataSource _dataSource)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DataSource", _dataSource == null ? null : _dataSource.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.ColumnDataSourceToString").withParams(params).execute(context);
	}
	public static java.lang.String columnMappingTypeToString(IContext context, excelimporter.proxies.MappingType _mappingType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MappingType", _mappingType == null ? null : _mappingType.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.ColumnMappingTypeToString").withParams(params).execute(context);
	}
	public static java.lang.String columnReferenceKeyTypeToString(IContext context, excelimporter.proxies.ReferenceKeyType _referenceKeyType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ReferenceKeyType", _referenceKeyType == null ? null : _referenceKeyType.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.ColumnReferenceKeyTypeToString").withParams(params).execute(context);
	}
	public static java.lang.String columnYesNoToString(IContext context, excelimporter.proxies.YesNo _yesNo)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("YesNo", _yesNo == null ? null : _yesNo.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.ColumnYesNoToString").withParams(params).execute(context);
	}
	public static excelimporter.proxies.Template excelImporterTemplateXSD(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("ExcelImporter.ExcelImporterTemplateXSD").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.Template.initialize(context, result);
	}
	public static excelimporter.proxies.XMLDocumentTemplate excelTemplate_ExportToXML(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("ExcelImporter.ExcelTemplate_ExportToXML").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.XMLDocumentTemplate.initialize(context, result);
	}
	public static void excelTemplate_ImportFromXml(IContext context, excelimporter.proxies.XMLDocumentTemplate _xMLDocumentTemplate)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("XMLDocumentTemplate", _xMLDocumentTemplate == null ? null : _xMLDocumentTemplate.getMendixObject());
		Core.microflowCall("ExcelImporter.ExcelTemplate_ImportFromXml").withParams(params).execute(context);
	}
	public static java.lang.String formatInteger(IContext context, java.lang.String _unformatted)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Unformatted", _unformatted);
		return (java.lang.String) Core.microflowCall("ExcelImporter.FormatInteger").withParams(params).execute(context);
	}
	public static excelimporter.proxies.AdditionalProperties getAddProperties(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("ExcelImporter.GetAddProperties").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.AdditionalProperties.initialize(context, result);
	}
	public static java.lang.String getCorrectString(IContext context, java.lang.String _textNL, java.lang.String _textEN, system.proxies.Language _curLanguage)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TextNL", _textNL);
		params.put("TextEN", _textEN);
		params.put("CurLanguage", _curLanguage == null ? null : _curLanguage.getMendixObject());
		return (java.lang.String) Core.microflowCall("ExcelImporter.GetCorrectString").withParams(params).execute(context);
	}
	public static void iVK_CancelTemplate(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_CancelTemplate").withParams(params).execute(context);
	}
	public static void iVK_Column_Save(IContext context, excelimporter.proxies.Column _column)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_Column_Save").withParams(params).execute(context);
	}
	public static void iVK_ColumnEdit(IContext context, excelimporter.proxies.Column _column, excelimporter.proxies.Template _enclosingContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		params.put("EnclosingContext", _enclosingContext == null ? null : _enclosingContext.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_ColumnEdit").withParams(params).execute(context);
	}
	public static void iVK_ColumnNew(IContext context, excelimporter.proxies.Template _enclosingContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("EnclosingContext", _enclosingContext == null ? null : _enclosingContext.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_ColumnNew").withParams(params).execute(context);
	}
	public static excelimporter.proxies.Template iVK_DuplicateTemplate(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("ExcelImporter.IVK_DuplicateTemplate").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.Template.initialize(context, result);
	}
	/**
	 * Example how you can implement your own excel import file
	 * 
	 * Retrieve a template, this can be  from an association or by the use of a constant or some application settings. How exactly the template is retrieved does not really matter. 
	 * 
	 * Next, if the template is found the import java action should be executed. This java action has three parameters. The first parameter is the retrieved template, the second parameter is the excel file. The third parameter is an optional parameter this parameter can contain an object in case you want to set the reference from all imported objects to the object from the parameter.
	 * 
	 */
	public static void iVK_ImportTemplateDocument(IContext context, excelimporter.proxies.TemplateDocument _templateDocument)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TemplateDocument", _templateDocument == null ? null : _templateDocument.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_ImportTemplateDocument").withParams(params).execute(context);
	}
	/**
	 * Create an XMLDocumentTemplate object and op the upload form.
	 */
	public static void iVK_ImportXML_Upload(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ExcelImporter.IVK_ImportXML_Upload").withParams(params).execute(context);
	}
	public static void iVK_SaveContinue_CreateTemplateFromDoc(IContext context, excelimporter.proxies.TemplateDocument _templateDocument)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TemplateDocument", _templateDocument == null ? null : _templateDocument.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_SaveContinue_CreateTemplateFromDoc").withParams(params).execute(context);
	}
	public static void iVK_SaveNewTemplate(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_SaveNewTemplate").withParams(params).execute(context);
	}
	public static void iVK_SaveNewTemplate_CreateColumns(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_SaveNewTemplate_CreateColumns").withParams(params).execute(context);
	}
	public static boolean iVK_SaveTemplate(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.IVK_SaveTemplate").withParams(params).execute(context);
	}
	public static void iVK_Template_ConnectMatchingAttributes(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_Template_ConnectMatchingAttributes").withParams(params).execute(context);
	}
	public static void iVK_Template_NewFromFile(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("ExcelImporter.IVK_Template_NewFromFile").withParams(params).execute(context);
	}
	public static void iVK_TemplateDoc_Cancel(IContext context, excelimporter.proxies.TemplateDocument _templateDocument)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TemplateDocument", _templateDocument == null ? null : _templateDocument.getMendixObject());
		Core.microflowCall("ExcelImporter.IVK_TemplateDoc_Cancel").withParams(params).execute(context);
	}
	public static java.lang.String mxObjectReferenceAssociationOwnerToString(IContext context, mxmodelreflection.proxies.AssociationOwner _associationOwnerEnum)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("AssociationOwnerEnum", _associationOwnerEnum == null ? null : _associationOwnerEnum.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.MxObjectReferenceAssociationOwnerToString").withParams(params).execute(context);
	}
	public static java.lang.String mxObjectReferenceReferenceTypeToString(IContext context, mxmodelreflection.proxies.ReferenceType _referenceTypeEnum)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ReferenceTypeEnum", _referenceTypeEnum == null ? null : _referenceTypeEnum.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.MxObjectReferenceReferenceTypeToString").withParams(params).execute(context);
	}
	public static java.lang.String parseEnumToString_StatisticLevel(IContext context, excelimporter.proxies.StatisticsLevel _printStatisticsMessages)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PrintStatisticsMessages", _printStatisticsMessages == null ? null : _printStatisticsMessages.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.ParseEnumToString_StatisticLevel").withParams(params).execute(context);
	}
	public static excelimporter.proxies.StatisticsLevel parseStringToEnum_StatisticsLevel(IContext context, java.lang.String _printStatisticsMessages)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PrintStatisticsMessages", _printStatisticsMessages);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.ParseStringToEnum_StatisticsLevel").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.StatisticsLevel.valueOf(result);
	}
	public static void prepareReferenceHandling(IContext context, excelimporter.proxies.Column _pColumn)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("pColumn", _pColumn == null ? null : _pColumn.getMendixObject());
		Core.microflowCall("ExcelImporter.prepareReferenceHandling").withParams(params).execute(context);
	}
	public static java.lang.String referenceHandlingEnumToString(IContext context, excelimporter.proxies.ReferenceHandlingEnum _referenceHandlingEnum)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ReferenceHandlingEnum", _referenceHandlingEnum == null ? null : _referenceHandlingEnum.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.ReferenceHandlingEnumToString").withParams(params).execute(context);
	}
	public static void setColumnStatus(IContext context, excelimporter.proxies.Column _column, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Column", _column == null ? null : _column.getMendixObject());
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.SetColumnStatus").withParams(params).execute(context);
	}
	public static void setupColumn(IContext context, excelimporter.proxies.Template _template, java.lang.String _attribute, java.lang.Long _colNr, java.util.List<excelimporter.proxies.Column> _columnList, excelimporter.proxies.YesNo _isKey, java.lang.String _mFName)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		params.put("Attribute", _attribute);
		params.put("ColNr", _colNr);
		java.util.List<IMendixObject> listparam_columnList = null;
		if (_columnList != null)
		{
			listparam_columnList = new java.util.ArrayList<>();
			for (var obj : _columnList) {
				listparam_columnList.add(obj.getMendixObject());
			}
		}
		params.put("ColumnList", listparam_columnList);

		params.put("IsKey", _isKey == null ? null : _isKey.name());
		params.put("MFName", _mFName);
		Core.microflowCall("ExcelImporter.SetupColumn").withParams(params).execute(context);
	}
	public static excelimporter.proxies.Template setupTemplate(IContext context, java.lang.String _templateName, java.lang.String _importObjectTypeName, java.lang.String _parentReferenceName, java.lang.Long _dataRowNr, excelimporter.proxies.ImportActions _importActions)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TemplateName", _templateName);
		params.put("ImportObjectTypeName", _importObjectTypeName);
		params.put("ParentReferenceName", _parentReferenceName);
		params.put("DataRowNr", _dataRowNr);
		params.put("ImportActions", _importActions == null ? null : _importActions.name());
		IMendixObject result = (IMendixObject)Core.microflowCall("ExcelImporter.SetupTemplate").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.Template.initialize(context, result);
	}
	public static boolean sF_Template_CheckNrs(IContext context, excelimporter.proxies.Template _template, boolean _showWarningPopup)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		params.put("ShowWarningPopup", _showWarningPopup);
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.SF_Template_CheckNrs").withParams(params).execute(context);
	}
	public static excelimporter.proxies.MappingType stringToColumnMappingType(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToColumnMappingType").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.MappingType.valueOf(result);
	}
	public static excelimporter.proxies.ReferenceKeyType stringToColumnReferenceKeyType(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToColumnReferenceKeyType").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.ReferenceKeyType.valueOf(result);
	}
	public static excelimporter.proxies.YesNo stringToColumnYesNo(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToColumnYesNo").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.YesNo.valueOf(result);
	}
	public static excelimporter.proxies.DataSource stringToDataSource(IContext context, java.lang.String _dataSource)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DataSource", _dataSource);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToDataSource").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.DataSource.valueOf(result);
	}
	public static mxmodelreflection.proxies.AssociationOwner stringToMxObjectReferenceAssociationOwner(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToMxObjectReferenceAssociationOwner").withParams(params).execute(context);
		return result == null ? null : mxmodelreflection.proxies.AssociationOwner.valueOf(result);
	}
	public static mxmodelreflection.proxies.ReferenceType stringToMxObjectReferenceReferenceType(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToMxObjectReferenceReferenceType").withParams(params).execute(context);
		return result == null ? null : mxmodelreflection.proxies.ReferenceType.valueOf(result);
	}
	public static excelimporter.proxies.ReferenceDataHandling stringToReferenceDataHandling(IContext context, java.lang.String _dataHandling)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DataHandling", _dataHandling);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToReferenceDataHandling").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.ReferenceDataHandling.valueOf(result);
	}
	public static excelimporter.proxies.ReferenceHandlingEnum stringToReferenceHandlingEnum(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToReferenceHandlingEnum").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.ReferenceHandlingEnum.valueOf(result);
	}
	public static excelimporter.proxies.ImportActions stringToTemplateImportActions(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToTemplateImportActions").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.ImportActions.valueOf(result);
	}
	public static excelimporter.proxies.RemoveIndicator stringToTemplateRemoveIndicator(IContext context, java.lang.String _removeUnsyncedObjects)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("RemoveUnsyncedObjects", _removeUnsyncedObjects);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToTemplateRemoveIndicator").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.RemoveIndicator.valueOf(result);
	}
	public static excelimporter.proxies.Status stringToTemplateStatusEnum(IContext context, java.lang.String _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input);
		java.lang.String result = (java.lang.String) Core.microflowCall("ExcelImporter.StringToTemplateStatusEnum").withParams(params).execute(context);
		return result == null ? null : excelimporter.proxies.Status.valueOf(result);
	}
	public static void sub_CreateColumnsFromTemplate(IContext context, excelimporter.proxies.Template _template)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		Core.microflowCall("ExcelImporter.Sub_CreateColumnsFromTemplate").withParams(params).execute(context);
	}
	public static java.lang.String templateImportActionsToString(IContext context, excelimporter.proxies.ImportActions _importActions)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ImportActions", _importActions == null ? null : _importActions.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.TemplateImportActionsToString").withParams(params).execute(context);
	}
	public static java.lang.String templateReferenceDataHandlingEnumToString(IContext context, excelimporter.proxies.ReferenceDataHandling _dataHandling)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DataHandling", _dataHandling == null ? null : _dataHandling.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.TemplateReferenceDataHandlingEnumToString").withParams(params).execute(context);
	}
	public static java.lang.String templateReferenceHandlingEnumToString(IContext context, excelimporter.proxies.ReferenceHandlingEnum _referenceHandling)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ReferenceHandling", _referenceHandling == null ? null : _referenceHandling.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.TemplateReferenceHandlingEnumToString").withParams(params).execute(context);
	}
	public static java.lang.String templateRemoveIndicatorToString(IContext context, excelimporter.proxies.RemoveIndicator _removeUnsyncedObjects)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("RemoveUnsyncedObjects", _removeUnsyncedObjects == null ? null : _removeUnsyncedObjects.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.TemplateRemoveIndicatorToString").withParams(params).execute(context);
	}
	public static java.lang.String templateStatusEnumToString(IContext context, excelimporter.proxies.Status _input)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Input", _input == null ? null : _input.name());
		return (java.lang.String) Core.microflowCall("ExcelImporter.TemplateStatusEnumToString").withParams(params).execute(context);
	}
	public static boolean validate_TemplateDocument(IContext context, excelimporter.proxies.TemplateDocument _templateDocument)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TemplateDocument", _templateDocument == null ? null : _templateDocument.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.Validate_TemplateDocument").withParams(params).execute(context);
	}
	public static boolean validateTemplate(IContext context, excelimporter.proxies.Template _template, boolean _showWarningPopup)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Template", _template == null ? null : _template.getMendixObject());
		params.put("ShowWarningPopup", _showWarningPopup);
		return (java.lang.Boolean) Core.microflowCall("ExcelImporter.ValidateTemplate").withParams(params).execute(context);
	}
}
