// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mendixsso.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the MendixSSO module
	public static system.proxies.User authorizeRequestWithAccessTokenFromRequest(IContext context, system.proxies.HttpRequest _httpRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("HttpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.AuthorizeRequestWithAccessTokenFromRequest").withParams(params).execute(context);
		return result == null ? null : system.proxies.User.initialize(context, result);
	}
	public static boolean checkUserRolesRemoved(IContext context, system.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MendixSSO.CheckUserRolesRemoved").withParams(params).execute(context);
	}
	public static java.util.List<system.proxies.HttpHeader> createAccessTokenAuthorizationHeaderList(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("MendixSSO.CreateAccessTokenAuthorizationHeaderList").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> system.proxies.HttpHeader.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.lang.String createAccessTokenAuthorizationHeaderValue(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.CreateAccessTokenAuthorizationHeaderValue").withParams(params).execute(context);
	}
	public static java.lang.String decrypt(IContext context, java.lang.String _encrypted)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Encrypted", _encrypted);
		return (java.lang.String) Core.microflowCall("MendixSSO.Decrypt").withParams(params).execute(context);
	}
	public static java.lang.String encrypt(IContext context, java.lang.String _plain)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Plain", _plain);
		return (java.lang.String) Core.microflowCall("MendixSSO.Encrypt").withParams(params).execute(context);
	}
	public static java.lang.String getEnvironmentPassword(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.GetEnvironmentPassword").withParams(params).execute(context);
	}
	public static java.lang.String getEnvironmentUUID(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.GetEnvironmentUUID").withParams(params).execute(context);
	}
	public static java.lang.String getOpenIDConnectProvider(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.GetOpenIDConnectProvider").withParams(params).execute(context);
	}
	public static java.lang.String getOpenIdConnectScopes(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.GetOpenIdConnectScopes").withParams(params).execute(context);
	}
	public static java.lang.String getRolesLocation(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.GetRolesLocation").withParams(params).execute(context);
	}
	public static java.lang.String getSignupHint(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MendixSSO.GetSignupHint").withParams(params).execute(context);
	}
	public static boolean getSilentAuthentication(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("MendixSSO.GetSilentAuthentication").withParams(params).execute(context);
	}
	public static mendixsso.proxies.UserProfile getUserProfileFromUserInfoEndpoint(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.GetUserProfileFromUserInfoEndpoint").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.UserProfile.initialize(context, result);
	}
	public static boolean mendixSSO_AfterStartup(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("MendixSSO.MendixSSO_AfterStartup").withParams(params).execute(context);
	}
	public static mendixsso.proxies.MendixSSOUser mendixSSO_CreateUser(IContext context, mendixsso.proxies.UserProfile _userProfile, java.lang.String _uUID)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserProfile", _userProfile == null ? null : _userProfile.getMendixObject());
		params.put("UUID", _uUID);
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.MendixSSO_CreateUser").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.MendixSSOUser.initialize(context, result);
	}
	public static mendixsso.proxies.MendixSSOUser mendixSSO_UpdateUser(IContext context, mendixsso.proxies.MendixSSOUser _user, mendixsso.proxies.UserProfile _userProfile, java.lang.String _uUID)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("UserProfile", _userProfile == null ? null : _userProfile.getMendixObject());
		params.put("UUID", _uUID);
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.MendixSSO_UpdateUser").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.MendixSSOUser.initialize(context, result);
	}
	public static void refreshUserRoles(IContext context, system.proxies.User _user, java.lang.String _userUUID)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("UserUUID", _userUUID);
		Core.microflowCall("MendixSSO.RefreshUserRoles").withParams(params).execute(context);
	}
	public static boolean retrieveUserRoles(IContext context, system.proxies.User _user, java.lang.String _userUUID)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("UserUUID", _userUUID);
		return (java.lang.Boolean) Core.microflowCall("MendixSSO.RetrieveUserRoles").withParams(params).execute(context);
	}
	public static void rS_NotifyUserRolesChanged(IContext context, java.lang.String _uUID)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UUID", _uUID);
		Core.microflowCall("MendixSSO.RS_NotifyUserRolesChanged").withParams(params).execute(context);
	}
	public static void sE_DeleteExpiredAuthRequests(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MendixSSO.SE_DeleteExpiredAuthRequests").withParams(params).execute(context);
	}
	public static void sE_DeleteExpiredTokens(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MendixSSO.SE_DeleteExpiredTokens").withParams(params).execute(context);
	}
	public static system.proxies.User sUB_AuthorizeRequestWithAccessTokenFromHeader(IContext context, java.lang.String _authorizationHeader)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("AuthorizationHeader", _authorizationHeader);
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.SUB_AuthorizeRequestWithAccessTokenFromHeader").withParams(params).execute(context);
		return result == null ? null : system.proxies.User.initialize(context, result);
	}
	public static mendixsso.proxies.DecryptedToken sUB_DecryptToken(IContext context, mendixsso.proxies.Token _token)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Token", _token == null ? null : _token.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.SUB_DecryptToken").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, result);
	}
	public static mendixsso.proxies.DecryptedToken sUB_GetAccessTokenAndEnsureNotExpiresSoon(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.SUB_GetAccessTokenAndEnsureNotExpiresSoon").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, result);
	}
	public static mendixsso.proxies.DecryptedToken sUB_GetDecryptedTokenByTypeForCurrentSession(IContext context, mendixsso.proxies.TokenType _tokenType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TokenType", _tokenType == null ? null : _tokenType.name());
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.SUB_GetDecryptedTokenByTypeForCurrentSession").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, result);
	}
	public static java.lang.String sUB_GetHttpHeaderValue(IContext context, java.lang.String _headerName, system.proxies.HttpMessage _httpMessage)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("HeaderName", _headerName);
		params.put("HttpMessage", _httpMessage == null ? null : _httpMessage.getMendixObject());
		return (java.lang.String) Core.microflowCall("MendixSSO.SUB_GetHttpHeaderValue").withParams(params).execute(context);
	}
	public static mendixsso.proxies.Token sUB_GetTokenByTypeForCurrentSession(IContext context, mendixsso.proxies.TokenType _tokenType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TokenType", _tokenType == null ? null : _tokenType.name());
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.SUB_GetTokenByTypeForCurrentSession").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.Token.initialize(context, result);
	}
	public static java.lang.String sUB_GetUserInfoFromIdentityProvider(IContext context, java.lang.String _accessToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("AccessToken", _accessToken);
		return (java.lang.String) Core.microflowCall("MendixSSO.SUB_GetUserInfoFromIdentityProvider").withParams(params).execute(context);
	}
	public static mendixsso.proxies.Response sUB_RefreshTokens(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MendixSSO.SUB_RefreshTokens").withParams(params).execute(context);
		return result == null ? null : mendixsso.proxies.Response.initialize(context, result);
	}
	public static void sUB_ReplaceRenewedToken(IContext context, java.lang.String _tokenValue, mendixsso.proxies.TokenType _tokenType, java.lang.Long _expiresIn)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TokenValue", _tokenValue);
		params.put("TokenType", _tokenType == null ? null : _tokenType.name());
		params.put("ExpiresIn", _expiresIn);
		Core.microflowCall("MendixSSO.SUB_ReplaceRenewedToken").withParams(params).execute(context);
	}
	public static java.lang.String sUB_ValidateHeaderAndReturnAccessToken(IContext context, java.lang.String _authorizationHeader)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("AuthorizationHeader", _authorizationHeader);
		return (java.lang.String) Core.microflowCall("MendixSSO.SUB_ValidateHeaderAndReturnAccessToken").withParams(params).execute(context);
	}
}
